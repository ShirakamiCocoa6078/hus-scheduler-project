// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  isSetupComplete   Boolean   @default(false)
  onboardingData    Json?
  archived          Boolean   @default(false)
  // Relation to Courses
  courses           Course[]
  // Relation to Tasks
  tasks             Task[]
  // Temporary storage for course import
  tempCoursesData   Json?
}

model Course {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseName  String
  dayOfWeek   Int
  period      Int
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks       Task[] // Relation to Tasks
}

model Task {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId           String?
  course             Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  title              String
  dueDate            DateTime
  priority           String
  isMoodleAssignment Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Weather {
  id          String   @id @default(cuid())
  locationKey String   @unique
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
