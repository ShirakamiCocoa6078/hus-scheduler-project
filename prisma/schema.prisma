
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  onboardingData  Json?
  isSetupComplete Boolean   @default(false)
  archived        Boolean   @default(false)
  tempCoursesData Json?
  accounts        Account[]
  sessions        Session[]
  courses         Course[]
  tasks           Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseName String
  dayOfWeek  Int
  period     Int
  location   String?
  tasks      Task[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  type        String   // "ASSIGNMENT" or "EXAM"
  title       String
  dueDate     DateTime

  location    String?  // Exam specific
  period      Int?     // Exam specific

  isCompleted Boolean  @default(false) // Assignment specific

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Weather {
  locationKey String   @id
  data        Json
  updatedAt   DateTime @updatedAt
}
