// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  courses           Course[]
  tasks             Task[]
  isSetupComplete   Boolean   @default(false)
  onboardingData    Json?
  tempCoursesData   Json?
  archived          Boolean   @default(false)
  moodleCalendarUrl String? // New field

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Course {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseName String
  dayOfWeek  Int
  period     Int
  startTime  String?
  endTime    String?
  location   String?
  tasks      Task[]

  @@map("courses")
}

model Task {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  type        String // "ASSIGNMENT" or "EXAM"
  title       String
  dueDate     DateTime
  isCompleted Boolean    @default(false)
  location    String?
  period      Int?

  @@map("tasks")
}

model Weather {
  locationKey String   @id
  data        Json
  updatedAt   DateTime @updatedAt

  @@map("weather")
}
