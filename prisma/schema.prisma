// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  isSetupComplete    Boolean   @default(false)
  onboardingData     Json?
  archived           Boolean   @default(false)

  accounts Account[]
  sessions Session[]
  courses  Course[]
  tasks    Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Weather {
  id          String   @id @default(cuid())
  locationKey String   @unique
  data        Json
  updatedAt   DateTime @updatedAt
}

model Course {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseName  String
  dayOfWeek   Int      // 0: Sunday, 1: Monday, ..., 6: Saturday
  period      Int      // 1, 2, 3, 4, 5
  startTime   String   // "09:00"
  endTime     String   // "10:30"
  location    String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title              String
  dueDate            DateTime
  priority           String
  course             String?
  isCompleted        Boolean  @default(false)
  isMoodleAssignment Boolean  @default(false)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}